      Comment //comment
      Comment /* also a comment */
      Comment //defines a custom binary operator
      Comment //with left-associativity and precidence of 15
      Comment //prefix and postfix are both urnary operators
      Comment //ternary operators can be emulated with tuples
PreprocessCmd operator
PreprocessArg =!=
PreprocessArg infix
PreprocessArg left
PreprocessArg 15
   Terminator ;
   Terminator ;
   Identifier vあr
   Identifier =
       Number 3
   Identifier +
       Number 5.0
   Identifier *
       Number 4
   Terminator ;
   Identifier str
   Identifier =
       String "test 不確かな text"
   Terminator ;
   Identifier z
   Identifier =
       Number .5
   Terminator ;
   Identifier noq
   Identifier =
   Identifier zee
     Accessor .
       Number 5
   Terminator ;
   Identifier floq
   Identifier =
   RegionOpen (
       Number 1
  RegionClose )
     Accessor .
       Number 3
   Terminator ;
   Identifier prop
   Identifier =
       Number 4000.5
     Accessor .
       Number 5
   Terminator ;
   Identifier proq
   Identifier =
       String 'string'
   Terminator ;
   Identifier a
   Identifier ::
   Identifier b
   Terminator ;
   Identifier foo_bar
   Identifier =
   Identifier baz
     Accessor .
   Identifier bonk
   Terminator ;
   Identifier z4d
   Identifier =
       Number 1'000'000
   Terminator ;
   Identifier quux
   Identifier =
   RegionOpen (
       Number 1
    Separator ,
       String "2"
    Separator ,
       Number 3
  RegionClose )
   Terminator ;
      Comment //tuple
   Identifier floop
   Identifier =
       Number 4
    Separator ,
       String '3'
    Separator ,
       Number 6
   Terminator ;
      Comment //tuple ---- missing 6
   Identifier nugget
   Identifier =
   RegionOpen [
       Number 7
    Separator ,
       Number 8
    Separator ,
       Number 9
  RegionClose ]
   Terminator ;
      Comment //list
   Identifier donk
   Identifier =
   RegionOpen [|
   Identifier a
    Separator ,
   Identifier b
    Separator ,
   Identifier c
  RegionClose |]
   Terminator ;
      Comment //array
   Identifier gork
   Identifier =
   Identifier x
    Separator ,
   Identifier y
    Separator ,
   Identifier z
   Terminator ;
      Comment //tuple ---- missing z
   Identifier a
   Identifier =
   RegionOpen (
   Identifier x
   Identifier :
       Number 1
    Separator ,
   Identifier y
   Identifier :
       Number 2
    Separator ,
   Identifier z
   Identifier :
       Number 3
  RegionClose )
   Terminator ;
      Comment //named tuple
   Identifier b
   Identifier =
   Identifier u
   Identifier :
       Number 4
    Separator ,
   Identifier v
   Identifier :
       Number 5
    Separator ,
   Identifier w
   Identifier :
       Number 6
   Terminator ;
      Comment //named tuple
   Identifier dotted
   Identifier =
   Identifier lal
     Accessor .
     Accessor .
   Identifier lol
   Terminator ;
   Identifier more
   Identifier =
   Identifier zoo
     Accessor .
     Accessor .
     Accessor .
   Identifier mop
   Identifier *
       Number 5
   Terminator ;
   Identifier b13
   Identifier =
   RegionOpen (
   Identifier jello
  RegionClose )
   RegionOpen {
   Identifier x
   Identifier =
       Number 10.5
   Terminator ;
   Identifier x
     Accessor .
       Number 5
   Identifier =!=
       String 'fuck'
   Terminator ;
  RegionClose }
   Identifier zzz
   Identifier =
   Identifier true
   Terminator ;
   Identifier eor
   Identifier =
   RegionOpen {
   Identifier a3sdfm
   Identifier :
       Number 5
   Terminator ;
   Identifier z3fsdf
   Identifier :
       String "6"
   Terminator ;
  RegionClose }
   Identifier lolo
   Identifier =
   Identifier null
   Terminator ;
PreprocessCmd exit
PreprocessArg 
   Identifier if
   RegionOpen (
   Identifier x
   Identifier ==
       Number 5
  RegionClose )
   RegionOpen {
   Identifier v313
   Terminator ;
  RegionClose }
   Identifier zoop
   Identifier =
   Identifier !
       Number 5
   Identifier +
       Number 3
   Terminator ;
   RegionOpen (
       Number 1
  RegionClose )
    Separator ,
       Number 2
    Separator ,
       Number 3
   Terminator ;
   Identifier !
       Number 5
    Separator ,
       Number 6
    Separator ,
       Number 7
   Terminator ;
   Identifier !
   RegionOpen (
       Number 8
       Number 9
       Number 10
  RegionClose )
   Terminator ;
   Identifier !
   RegionOpen (
       Number 8
    Separator ,
       Number 9
    Separator ,
       Number 10
  RegionClose )
   Terminator ;
   Identifier nest
   Identifier =
   RegionOpen (
  RegionClose )
   RegionOpen {
   Identifier deeper
   Identifier :
   RegionOpen (
  RegionClose )
   RegionOpen {
   Identifier deepest
   Identifier :
       Number 5
   Terminator ;
  RegionClose }
   Identifier otherd
   Identifier :
   RegionOpen {
   Identifier otherst
   Identifier :
       String "blah"
   Terminator ;
  RegionClose }
  RegionClose }
   Identifier back
   Identifier =
   Identifier out
   Terminator ;
   Identifier rest
   Identifier =
   RegionOpen (
   Identifier a
    Separator ,
   Identifier b
    Separator ,
   RegionOpen (
   Identifier c
  RegionClose )
  RegionClose )
   RegionOpen {
  RegionClose }
